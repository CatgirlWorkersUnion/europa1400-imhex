#include <std/core.pat>
#include <std/string.pat>
#include <std/mem.pat>
#include <std/io.pat>

fn get_text_count(u32 address, u32 next_address) {
    u32 cur_offset = address;
    u32 count = 0;

    if (std::mem::read_unsigned(cur_offset, 1) == 0x00) {
        return 1;
    }

    while (cur_offset < next_address) {

        while (true) {
            u8 read_byte = std::mem::read_unsigned(cur_offset, 1);
            cur_offset += 1;

            if (read_byte == 0x00) {
                break;
            }
        }

        count += 1;
    }

    return count;
};

struct TextDefinition {
    char name[];
    u32 length_name = std::string::length(name);
    padding[80 - length_name];
};

struct Text {
    char text[];
};

struct Texts {
    u32 cur_index = std::core::array_index();
    bool is_last = cur_index == parent.offset_count - 1;

    u32 text_count = 1;

    if (!is_last) {
        u32 address = $;
        u32 prev_offset = parent.text_offsets[cur_index];
        u32 next_offset = parent.text_offsets[cur_index + 1];
        u32 offset = next_offset - prev_offset;
        u32 next_address = address + offset;
        text_count = get_text_count(address, next_address);
    }

    Text texts[text_count];
};

struct Res {
    u32 offset_count;
    u32 some_count1;
    u32 some_count2;

    u32 text_offsets[offset_count];

    TextDefinition text_definitions[offset_count];

    u8 magic_bytes[offset_count];

    u32 magic;

    Texts texts[offset_count];
};

Res res @ $;
