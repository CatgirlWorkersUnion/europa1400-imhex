#include <std/string.pat>
#include <std/io.pat>
#include <std/mem.pat>
#pragma pattern_limit 99999999

fn is_zero(u32 count) {
    u32 offset = 0;

    for (u32 i = 0, i < count, i += 1) {
        u8 read_byte = std::mem::read_unsigned($ + offset, 1);

        if (read_byte != 0) {
            return false;
        }

        offset += 1;
    }

    return true;
};

struct SkipZero<auto Count, auto error_on_not_zero, auto print_on_not_zero> {

    bool is_zero = is_zero(Count);

    padding[Count];

    if (!is_zero) {
        if (error_on_not_zero) {
            std::error("Value was not zero!");
        } else {
            if (print_on_not_zero) {
                std::print("Value was not zero!");
            }
        }
    }
} [[sealed, hidden, no_unique_address]];

struct RGB {
    u8 r [[color("FF0000")]];
    u8 g [[color("00FF00")]];
    u8 b [[color("0000FF")]];
};

struct RGBA<auto R, auto G, auto B, auto A> {
    u8 r = R;
    u8 g = G;
    u8 b = B;
    u8 a = A;
} [[sealed, hidden, no_unique_address]];

struct TransparencyBlock {
    u32 size_transparent;
    u32 count_transparent = size_transparent / 3;
    u32 count_pixel;

    RGBA<0xFF, 0xFF, 0xFF, 0x00> transparent_pixels[count_transparent];
    RGB pixels[count_pixel];
};

struct TransparencyGraphicRow {
    u32 block_count;
    TransparencyBlock transparency_blocks[block_count];
};

struct Graphic {
    u32 size;
    u16 magic1;
    u16 width;
    u16 magic2;
    u16 height;
    u16 magic3;
    u16 magic4;
    u16 magic5;
    u16 width2;
    u16 height2;
    u16 magic6;
    u16 magic7;
    u16 magic8;
    u16 magic9;
    u16 magic10;
    u16 magic11;
    u16 magic12;
    u16 magic13;
    u32 magic14;
    u32 size_without_footer;
    u32 magic15;

    u32 footer_size = size - size_without_footer;

    if (footer_size == size) {
        RGB pixels[height * width];
    } else {
        TransparencyGraphicRow graphic_row[height];
        u32 footer_values[footer_size / 4];
    }
};

struct Shapebank {
    char const_shapbank[8];

    u8 magic1;
    u8 magic2;

    padding[32];
//    SkipZero<32, false, true>;

    u16 graphics_count;
    u16 magic_data1[2];

    u32 shapebank_size;

    u32 magic3;

    //SkipZero<6, false, true>;
    padding[6];

    u16 size_without_footer;

//    SkipZero<3, false, true>;
    padding[3];

    u16 magic4;

    u32 graphics_offsets[graphics_count];

//    SkipZero<0x800 - graphics_count * 4, false, true>;
    padding[0x800 - graphics_count * 4];

    Graphic graphics[graphics_count];

    bool has_footer = size_without_footer != 0;
    u32 size_footer = graphics_count * 8;

    if (has_footer) {
        padding[size_footer];
    }
};

struct ShapebankDefinition {
    char name[48];

    u32 address;

//    SkipZero<4, true, true>;
    padding[4];

    u32 shapebank_size;

    u32 magic1;

  //  SkipZero<4, true, true>;
    padding[4];

    bool is_main_shapebank;

//    SkipZero<7, true, true>;
    padding[7];

    u32 magic3;

    u16 width;
    u16 height;

};

struct Gfx {
    u32 shapebank_count;

    ShapebankDefinition shapebank_definitions[shapebank_count];
    //Shapebank shapebanks[197];
};

Gfx gfx @ $;
